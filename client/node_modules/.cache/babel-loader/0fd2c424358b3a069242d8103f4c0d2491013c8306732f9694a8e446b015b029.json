{"ast":null,"code":"const express = require('express');\nconst Client = require('../models/Client');\nconst router = express.Router();\n\n// Get all clients\nrouter.get('/', async (req, res) => {\n  try {\n    const clients = await Client.find().populate('registeredBy', 'name email').sort({\n      registrationDate: -1\n    });\n    res.json({\n      success: true,\n      clients\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'Failed to fetch clients',\n      error: error.message\n    });\n  }\n});\n\n// Register a new client\nrouter.post('/register', async (req, res) => {\n  try {\n    const {\n      name,\n      address,\n      email,\n      phone,\n      registeredBy\n    } = req.body;\n\n    // Check if client already exists\n    const existingClient = await Client.findOne({\n      name: name.trim(),\n      address: address.trim()\n    });\n    if (existingClient) {\n      return res.status(400).json({\n        success: false,\n        message: 'Client already registered with this name and address'\n      });\n    }\n    const client = new Client({\n      name: name.trim(),\n      address: address.trim(),\n      email: email || '',\n      phone: phone || '',\n      registeredBy\n    });\n    await client.save();\n    await client.populate('registeredBy', 'name email');\n    res.status(201).json({\n      success: true,\n      message: 'Client registered successfully',\n      client\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'Client registration failed',\n      error: error.message\n    });\n  }\n});\n\n// Check if a client is already registered\nrouter.post('/check', async (req, res) => {\n  try {\n    const {\n      name,\n      address\n    } = req.body;\n    const client = await Client.findOne({\n      name: name.trim(),\n      address: address.trim()\n    });\n    res.json({\n      success: true,\n      isRegistered: !!client,\n      client\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'Failed to check client',\n      error: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","Client","router","Router","get","req","res","clients","find","populate","sort","registrationDate","json","success","error","status","message","post","name","address","email","phone","registeredBy","body","existingClient","findOne","trim","client","save","isRegistered","module","exports"],"sources":["D:/PG/New folder (2)/bb/exel-bill-manage-unsucsess-runnig-main/exel-bill-manage-unsucsess-runnig-main/client/src/pages/ClientList.js"],"sourcesContent":["const express = require('express');\r\nconst Client = require('../models/Client');\r\nconst router = express.Router();\r\n\r\n// Get all clients\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const clients = await Client.find().populate('registeredBy', 'name email').sort({ registrationDate: -1 });\r\n    res.json({ \r\n      success: true,\r\n      clients \r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false,\r\n      message: 'Failed to fetch clients', \r\n      error: error.message \r\n    });\r\n  }\r\n});\r\n\r\n// Register a new client\r\nrouter.post('/register', async (req, res) => {\r\n  try {\r\n    const { name, address, email, phone, registeredBy } = req.body;\r\n    \r\n    // Check if client already exists\r\n    const existingClient = await Client.findOne({ \r\n      name: name.trim(), \r\n      address: address.trim() \r\n    });\r\n    \r\n    if (existingClient) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        message: 'Client already registered with this name and address' \r\n      });\r\n    }\r\n    \r\n    const client = new Client({\r\n      name: name.trim(),\r\n      address: address.trim(),\r\n      email: email || '',\r\n      phone: phone || '',\r\n      registeredBy\r\n    });\r\n    \r\n    await client.save();\r\n    await client.populate('registeredBy', 'name email');\r\n    \r\n    res.status(201).json({ \r\n      success: true,\r\n      message: 'Client registered successfully',\r\n      client \r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false,\r\n      message: 'Client registration failed', \r\n      error: error.message \r\n    });\r\n  }\r\n});\r\n\r\n// Check if a client is already registered\r\nrouter.post('/check', async (req, res) => {\r\n  try {\r\n    const { name, address } = req.body;\r\n    \r\n    const client = await Client.findOne({ \r\n      name: name.trim(), \r\n      address: address.trim() \r\n    });\r\n    \r\n    res.json({ \r\n      success: true,\r\n      isRegistered: !!client,\r\n      client \r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false,\r\n      message: 'Failed to check client', \r\n      error: error.message \r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}