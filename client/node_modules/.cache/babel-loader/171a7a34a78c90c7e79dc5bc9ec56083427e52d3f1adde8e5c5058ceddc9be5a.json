{"ast":null,"code":"var _jsxFileName = \"D:\\\\PG\\\\New folder (2)\\\\bb\\\\exel-bill-manage-unsucsess-runnig-main\\\\exel-bill-manage-unsucsess-runnig-main\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = localStorage.getItem('user');\n        if (token && userData) {\n          const parsedUser = JSON.parse(userData);\n          // Ensure user object has role property\n          if (!parsedUser.role) {\n            parsedUser.role = 'user';\n          }\n          setUser(parsedUser);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const userData = {\n          _id: data.user._id,\n          name: data.user.name,\n          email: data.user.email,\n          role: data.user.role || 'user'\n        };\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Login failed'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const userData = {\n          _id: data.user._id,\n          name: data.user.name,\n          email: data.user.email,\n          role: data.user.role || 'user'\n        };\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        message: 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","initializeAuth","token","localStorage","getItem","userData","parsedUser","JSON","parse","role","error","console","removeItem","login","email","password","response","fetch","method","headers","body","stringify","data","json","ok","_id","name","setItem","success","message","register","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PG/New folder (2)/bb/exel-bill-manage-unsucsess-runnig-main/exel-bill-manage-unsucsess-runnig-main/client/src/context/AuthContext.js"],"sourcesContent":["// client/src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = localStorage.getItem('user');\n        \n        if (token && userData) {\n          const parsedUser = JSON.parse(userData);\n          // Ensure user object has role property\n          if (!parsedUser.role) {\n            parsedUser.role = 'user';\n          }\n          setUser(parsedUser);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        const userData = {\n          _id: data.user._id,\n          name: data.user.name,\n          email: data.user.email,\n          role: data.user.role || 'user'\n        };\n        \n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        return { success: true };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, message: 'Login failed' };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        const userData = {\n          _id: data.user._id,\n          name: data.user.name,\n          email: data.user.email,\n          role: data.user.role || 'user'\n        };\n        \n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        return { success: true };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { success: false, message: 'Registration failed' };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAON,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAGA,CAAA,KAAM;MAC3B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;QAE7C,IAAIF,KAAK,IAAIG,QAAQ,EAAE;UACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;UACvC;UACA,IAAI,CAACC,UAAU,CAACG,IAAI,EAAE;YACpBH,UAAU,CAACG,IAAI,GAAG,MAAM;UAC1B;UACAX,OAAO,CAACQ,UAAU,CAAC;QACrB;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;MACjC,CAAC,SAAS;QACRZ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;UAAEP,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAIP,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMnB,QAAQ,GAAG;UACfoB,GAAG,EAAEH,IAAI,CAACzB,IAAI,CAAC4B,GAAG;UAClBC,IAAI,EAAEJ,IAAI,CAACzB,IAAI,CAAC6B,IAAI;UACpBZ,KAAK,EAAEQ,IAAI,CAACzB,IAAI,CAACiB,KAAK;UACtBL,IAAI,EAAEa,IAAI,CAACzB,IAAI,CAACY,IAAI,IAAI;QAC1B,CAAC;QAEDN,YAAY,CAACwB,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACpB,KAAK,CAAC;QACzCC,YAAY,CAACwB,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACc,SAAS,CAAChB,QAAQ,CAAC,CAAC;QACtDP,OAAO,CAACO,QAAQ,CAAC;QACjB,OAAO;UAAEuB,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,OAAO;UAAEA,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEP,IAAI,CAACO;QAAQ,CAAC;MAClD;IACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO;QAAEkB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IACpD;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAOJ,IAAI,EAAEZ,KAAK,EAAEC,QAAQ,KAAK;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;UAAEK,IAAI;UAAEZ,KAAK;UAAEC;QAAS,CAAC;MAChD,CAAC,CAAC;MAEF,MAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAIP,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMnB,QAAQ,GAAG;UACfoB,GAAG,EAAEH,IAAI,CAACzB,IAAI,CAAC4B,GAAG;UAClBC,IAAI,EAAEJ,IAAI,CAACzB,IAAI,CAAC6B,IAAI;UACpBZ,KAAK,EAAEQ,IAAI,CAACzB,IAAI,CAACiB,KAAK;UACtBL,IAAI,EAAEa,IAAI,CAACzB,IAAI,CAACY,IAAI,IAAI;QAC1B,CAAC;QAEDN,YAAY,CAACwB,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACpB,KAAK,CAAC;QACzCC,YAAY,CAACwB,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACc,SAAS,CAAChB,QAAQ,CAAC,CAAC;QACtDP,OAAO,CAACO,QAAQ,CAAC;QACjB,OAAO;UAAEuB,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,OAAO;UAAEA,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEP,IAAI,CAACO;QAAQ,CAAC;MAClD;IACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QAAEkB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAsB,CAAC;IAC3D;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB5B,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/Bd,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMkC,KAAK,GAAG;IACZnC,IAAI;IACJgB,KAAK;IACLiB,QAAQ;IACRC,MAAM;IACNhC;EACF,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAAC0C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArC,QAAA,EAChCA;EAAQ;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzC,GAAA,CAnHWF,YAAY;AAAA4C,EAAA,GAAZ5C,YAAY;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}